#import <Foundation/Foundation.h>
#import "JSAPIObject.h"

/**
* Knetik Platform API Documentation latest 
* This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
*
* OpenAPI spec version: latest 
* Contact: support@knetik.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/





@protocol JSAPIOAuth2ProviderResource
@end

@interface JSAPIOAuth2ProviderResource : JSAPIObject

/* The grant type chosen when creating your client with the provider. Typically authorization_code for maximum security. [optional]
 */
@property(nonatomic) NSString* authorizationGrantType;
/* The provider's sign-in page URL. Typically something like oauth/authorize [optional]
 */
@property(nonatomic) NSString* authorizationUri;
/* The method used by the provider to capture the credentials. See the provider's documentation for details [optional]
 */
@property(nonatomic) NSString* clientAuthenticationMethod;
/* The oauth client ID from the provider. This is used to exchange codes for tokens. [optional]
 */
@property(nonatomic) NSString* clientId;
/* The user-friendly name of this provider [optional]
 */
@property(nonatomic) NSString* clientName;
/* The oauth client secret from the provider. This is used to exchange codes for tokens. [optional]
 */
@property(nonatomic) NSString* clientSecret;
/* Applied to the sign-in button.  EX: #FF0033 [optional]
 */
@property(nonatomic) NSString* color;
/* The Font Awesome classes to be applied to the sign-in button. Ex: fab fa-facebook [optional]
 */
@property(nonatomic) NSString* icon;
/* The provider's URL that allows decoding JWT oauth tokens [optional]
 */
@property(nonatomic) NSString* jwkSetUri;
/* Whether this provider follows OIDC standards.  If not, you must provide the required mapping in provider_details [optional]
 */
@property(nonatomic) NSNumber* oidcCompliant;
/* A map of keys and the keys they translate to for non-OIDC complient providers.  The 'email' key is required if emails are set to required in the config service.  Optional keys are other keys in the user object, currently ignoring lists and maps. [optional]
 */
@property(nonatomic) NSDictionary<NSString*, NSString*>* providerDetails;
/* The unique ID given to this provider [optional]
 */
@property(nonatomic) NSString* providerId;
/* The list of permissions to request the provider when signing-in (Allow MyApp to access x, y, z information). Comma-separated strings without spaces [optional]
 */
@property(nonatomic) NSString* scopes;
/* The provider's token URL used to exchange the authorization code for a token. Typically something like oauth/token [optional]
 */
@property(nonatomic) NSString* tokenUri;
/* The provider's user info URL AKA \"me endpoint\" used to load the user's details associated with the oauth token [optional]
 */
@property(nonatomic) NSString* userInfoEndpointUri;
/* The name of the field in the provider's User Info Endpoint that provides a unique identifier for the connected user.  Defaults to 'id'. [optional]
 */
@property(nonatomic) NSString* userInfoEndpointUserNameAttributeName;

+ (NSDictionary *)modalDictionary;

@end
