#import <Foundation/Foundation.h>
#import "JSAPIMonitoringAlertResource.h"
#import "JSAPIMonitoringIncidentEventResource.h"
#import "JSAPIMonitoringIncidentResource.h"
#import "JSAPIMonitoringMetricDatapointResource.h"
#import "JSAPIMonitoringMetricRecordResource.h"
#import "JSAPIMonitoringMetricResource.h"
#import "JSAPIPageResourceMonitoringAlertResource_.h"
#import "JSAPIPageResourceMonitoringIncidentEventResource_.h"
#import "JSAPIPageResourceMonitoringIncidentResource_.h"
#import "JSAPIPageResourceMonitoringMetricResource_.h"
#import "JSAPIResult.h"
#import "JSAPIApi.h"

/**
* Knetik Platform API Documentation latest 
* This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
*
* OpenAPI spec version: latest 
* Contact: support@knetik.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface JSAPIMonitoringApi: NSObject <JSAPIApi>

extern NSString* kJSAPIMonitoringApiErrorDomain;
extern NSInteger kJSAPIMonitoringApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(JSAPIApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Create a new alert
/// <br><br><b>Permissions:</b> POST<br /><b>Permissions Needed:</b> POST
///
/// @param alertResource The alert object (optional)
/// 
///  code:201 message:"Created",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIMonitoringAlertResource*
-(NSURLSessionTask*) createAlertWithAlertResource: (JSAPIMonitoringAlertResource*) alertResource
    completionHandler: (void (^)(JSAPIMonitoringAlertResource* output, NSError* error)) handler;


/// Create a new metric
/// <br><br><b>Permissions:</b> POST<br /><b>Permissions Needed:</b> POST
///
/// @param metricResource The new metric (optional)
/// 
///  code:201 message:"Created",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIMonitoringMetricResource*
-(NSURLSessionTask*) createMetricWithMetricResource: (JSAPIMonitoringMetricResource*) metricResource
    completionHandler: (void (^)(JSAPIMonitoringMetricResource* output, NSError* error)) handler;


/// Delete an existing alert
/// <b>Permissions Needed:</b> DELETE<br /><b>Permissions Needed:</b> DELETE
///
/// @param _id The alert id
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) deleteAlertWithId: (NSString*) _id
    completionHandler: (void (^)(NSError* error)) handler;


/// End an existing incident
/// Does not delete the incident, but marks it as resolved by setting the end date.<b>Permissions Needed:</b> DELETE<br /><b>Permissions Needed:</b> DELETE
///
/// @param _id The incident id
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) deleteIncidentWithId: (NSString*) _id
    completionHandler: (void (^)(NSError* error)) handler;


/// Delete an existing metric
/// This will delete all metrics referencing this metric as its parent.  <br><b>Permissions Needed:</b> DELETE<br /><b>Permissions Needed:</b> DELETE
///
/// @param _id The metric id
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) deleteMetricWithId: (NSString*) _id
    completionHandler: (void (^)(NSError* error)) handler;


/// Get a single alert
/// <b>Permissions Needed:</b> GET<br /><b>Permissions Needed:</b> GET
///
/// @param _id The alert id
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIMonitoringAlertResource*
-(NSURLSessionTask*) getAlertWithId: (NSString*) _id
    completionHandler: (void (^)(JSAPIMonitoringAlertResource* output, NSError* error)) handler;


/// List and search alerts
/// Get a list of alerts with optional filtering. <br><br><b>Permissions Needed:</b> LIST<br /><b>Permissions Needed:</b> NONE
///
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned, starting with 1 (optional) (default to 1)
/// @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional) (default to id:ASC)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIPageResourceMonitoringAlertResource_*
-(NSURLSessionTask*) getAlertsWithSize: (NSNumber*) size
    page: (NSNumber*) page
    order: (NSString*) order
    completionHandler: (void (^)(JSAPIPageResourceMonitoringAlertResource_* output, NSError* error)) handler;


/// Get a single incident
/// <b>Permissions Needed:</b> GET<br /><b>Permissions Needed:</b> GET
///
/// @param _id The incident id
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIMonitoringIncidentResource*
-(NSURLSessionTask*) getIncidentWithId: (NSString*) _id
    completionHandler: (void (^)(JSAPIMonitoringIncidentResource* output, NSError* error)) handler;


/// Get the events of an incident
/// <b>Permissions Needed:</b> LIST<br /><b>Permissions Needed:</b> LIST
///
/// @param _id The incident id
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned, starting with 1 (optional) (default to 1)
/// @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional) (default to id:ASC)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIPageResourceMonitoringIncidentEventResource_*
-(NSURLSessionTask*) getIncidentEventsWithId: (NSString*) _id
    size: (NSNumber*) size
    page: (NSNumber*) page
    order: (NSString*) order
    completionHandler: (void (^)(JSAPIPageResourceMonitoringIncidentEventResource_* output, NSError* error)) handler;


/// List and search incidents
/// Get a list of incidents with optional filtering. <br><br><b>Permissions Needed:</b> LIST<br /><b>Permissions Needed:</b> NONE
///
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned, starting with 1 (optional) (default to 1)
/// @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional) (default to id:ASC)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIPageResourceMonitoringIncidentResource_*
-(NSURLSessionTask*) getIncidentsWithSize: (NSNumber*) size
    page: (NSNumber*) page
    order: (NSString*) order
    completionHandler: (void (^)(JSAPIPageResourceMonitoringIncidentResource_* output, NSError* error)) handler;


/// Get a single metric
/// <b>Permissions Needed:</b> GET<br /><b>Permissions Needed:</b> GET
///
/// @param _id The metric id
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIMonitoringMetricResource*
-(NSURLSessionTask*) getMetricWithId: (NSString*) _id
    completionHandler: (void (^)(JSAPIMonitoringMetricResource* output, NSError* error)) handler;


/// List and search metrics
/// Get a list of metrics with optional filtering. <br><br><b>Permissions Needed:</b> LIST<br /><b>Permissions Needed:</b> LIST
///
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned, starting with 1 (optional) (default to 1)
/// @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional) (default to id:ASC)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIPageResourceMonitoringMetricResource_*
-(NSURLSessionTask*) getMetricsWithSize: (NSNumber*) size
    page: (NSNumber*) page
    order: (NSString*) order
    completionHandler: (void (^)(JSAPIPageResourceMonitoringMetricResource_* output, NSError* error)) handler;


/// Post a metric datapoint batch
/// Only works with counter and gauge metrics. Re-submit the entire batch in case of failure. <br><br><b>Permissions Needed:</b> RECORD<br /><b>Permissions Needed:</b> POST
///
/// @param batch The metric datapoints (optional)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) postBatchWithBatch: (NSArray<JSAPIMonitoringMetricDatapointResource>*) batch
    completionHandler: (void (^)(NSError* error)) handler;


/// Post a metric datapoint
/// Only works with counter and gauge metrics. <br><br><b>Permissions Needed:</b> RECORD<br /><b>Permissions Needed:</b> RECORD
///
/// @param _id The metric id
/// @param metricDatapoint The metric datapoint (optional)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) postDatapointWithId: (NSString*) _id
    metricDatapoint: (JSAPIMonitoringMetricDatapointResource*) metricDatapoint
    completionHandler: (void (^)(NSError* error)) handler;


/// Report an incident event
/// Updates the current incident for an alert or starts a new one if none current. <br><br><b>Permissions:</b> POST<br /><b>Permissions Needed:</b> POST
///
/// @param incidentResource The new incident (optional)
/// 
///  code:201 message:"Created",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIMonitoringIncidentResource*
-(NSURLSessionTask*) receiveEventWithIncidentResource: (JSAPIMonitoringIncidentEventResource*) incidentResource
    completionHandler: (void (^)(JSAPIMonitoringIncidentResource* output, NSError* error)) handler;


/// Start recording a metric
/// Only works with delta and timer metrics. <br><br><b>Permissions Needed:</b> RECORD<br /><b>Permissions Needed:</b> RECORD
///
/// @param _id The metric id
/// @param metricRecord The metric record (optional)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) startRecordMetricWithId: (NSString*) _id
    metricRecord: (JSAPIMonitoringMetricRecordResource*) metricRecord
    completionHandler: (void (^)(NSError* error)) handler;


/// Stop recording a metric
/// Only works with delta and timer metrics. <br><br><b>Permissions Needed:</b> RECORD<br /><b>Permissions Needed:</b> RECORD
///
/// @param _id The metric id
/// @param metricRecord The metric record (optional)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) stopRecordMetricWithId: (NSString*) _id
    metricRecord: (JSAPIMonitoringMetricRecordResource*) metricRecord
    completionHandler: (void (^)(NSError* error)) handler;


/// Update an existing alert
/// <b>Permissions Needed:</b> PUT<br /><b>Permissions Needed:</b> PUT
///
/// @param _id The alert id
/// @param alertResource The alert object (optional)
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) updateAlertWithId: (NSString*) _id
    alertResource: (JSAPIMonitoringAlertResource*) alertResource
    completionHandler: (void (^)(NSError* error)) handler;


/// Update an existing metric
/// <b>Permissions Needed:</b> PUT<br /><b>Permissions Needed:</b> PUT
///
/// @param _id The metric id
/// @param metricResource The metric object (optional)
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) updateMetricWithId: (NSString*) _id
    metricResource: (JSAPIMonitoringMetricResource*) metricResource
    completionHandler: (void (^)(NSError* error)) handler;



@end
