#import <Foundation/Foundation.h>
#import "JSAPIOAuth2ProviderResource.h"
#import "JSAPIPageResourceOAuth2ProviderResource_.h"
#import "JSAPIResult.h"
#import "JSAPIApi.h"

/**
* Knetik Platform API Documentation latest 
* This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
*
* OpenAPI spec version: latest 
* Contact: support@knetik.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface JSAPIAuthProvidersApi: NSObject <JSAPIApi>

extern NSString* kJSAPIAuthProvidersApiErrorDomain;
extern NSInteger kJSAPIAuthProvidersApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(JSAPIApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Create a new OAuth 2 provider
/// <b>Permissions Needed:</b> POST
///
/// @param providerResource providerResource
/// 
///  code:201 message:"Created",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIOAuth2ProviderResource*
-(NSURLSessionTask*) createProviderWithProviderResource: (JSAPIOAuth2ProviderResource*) providerResource
    completionHandler: (void (^)(JSAPIOAuth2ProviderResource* output, NSError* error)) handler;


/// Delete an existing OAuth 2 provider
/// <b>Permissions Needed:</b> DELETE
///
/// @param providerId provider_id
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) deleteProviderWithProviderId: (NSString*) providerId
    completionHandler: (void (^)(NSError* error)) handler;


/// Get an existing OAuth 2 provider
/// <b>Permissions Needed:</b> GET
///
/// @param providerId provider_id
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIOAuth2ProviderResource*
-(NSURLSessionTask*) getProviderWithProviderId: (NSString*) providerId
    completionHandler: (void (^)(JSAPIOAuth2ProviderResource* output, NSError* error)) handler;


/// List OAuth 2 providers
/// <b>Permissions Needed:</b> LIST
///
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIPageResourceOAuth2ProviderResource_*
-(NSURLSessionTask*) getProvidersWithCompletionHandler: 
    (void (^)(JSAPIPageResourceOAuth2ProviderResource_* output, NSError* error)) handler;


/// Update an existing OAuth 2 provider
/// <b>Permissions Needed:</b> PUT
///
/// @param providerId provider_id
/// @param providerResource providerResource
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) updateProviderWithProviderId: (NSString*) providerId
    providerResource: (JSAPIOAuth2ProviderResource*) providerResource
    completionHandler: (void (^)(NSError* error)) handler;



@end
